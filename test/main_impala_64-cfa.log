
in_node: new InNode(main_impala_64)
in_node: new InNode(end_scope_30)
run_cfa()
+WL: main_impala_64, op 0 = a_35: fn(mem, qs32, qs32, fn(mem, qs32))

run_cfa() pop: main_impala_64: fn(mem, fn(mem, bool)) - 0 fn(mem, qs32, qs32, fn(mem, qs32)) a_35
  cf_nodes(main_impala_64, 0) op is: fn(mem, qs32, qs32, fn(mem, qs32)) a_35
    marking stable: main_impala_64, op 0
    out_node: new OutNode(main_impala_64, a_35)
    old set: {}
    new set: {main_impala_64-a_35}
    ignoring old_set, first time computing this
      newly found node: main_impala_64-a_35
      > link main_impala_64 -> main_impala_64-a_35
        arg main_impala_74 (main_impala_64, 4): fn(mem, qs32)
            cf_nodes(main_impala_64, 4) op is: fn(mem, qs32) main_impala_74
              marking stable: main_impala_64, op 4
              in_node: new InNode(main_impala_74)
              old set: {}
              new set: {main_impala_74}
              ignoring old_set, first time computing this
                newly found node: main_impala_74
          > link main_impala_64-a_35 -> main_impala_74
          recompute continuation of main_impala_74:
          +WL: main_impala_74, op 0 = return_66: fn(mem, bool)

run_cfa() pop: main_impala_74: fn(mem, qs32) - 0 fn(mem, bool) return_66
  cf_nodes(main_impala_74, 0) op is: fn(mem, bool) return_66
    marking stable: main_impala_74, op 0
    out_node: new OutNode(main_impala_74, return_66)
    old set: {}
    new set: {main_impala_74-return_66}
    ignoring old_set, first time computing this
      newly found node: main_impala_74-return_66
      > link main_impala_74 -> main_impala_74-return_66
run_cfa: worklist empty, finished
Final links after CFA:
  main_impala_64
    main_impala_64-a_35
      main_impala_74
  main_impala_74
    main_impala_74-return_66
  end_scope_30
build_cfg: adding necessary exit links
> link main_impala_74-return_66 -> end_scope_30
scope entry: main_impala_64
cfa entry: end_scope_30