fn generic_while[L, B](l : L,
                          head : fn(L, fn(B, bool)), 
                          body : fn(B, fn(L)), 
                          next : fn(B)) 
{
    head(l,
        |b : B, cond : bool| {
            if (cond) {
                generic_while(body(b), head, body, next)
            } else {
                next(b)
            }
        }
    )
}
if  { 0 } else { 1 }
fn main(ret_main : fn(int))
{
    generic_while(
        0, // counter
        |i : int, ret : fn(int, bool)| { ret(i, i < 42) },
        |i : int| -> int { i + 1 }) == 42
}
